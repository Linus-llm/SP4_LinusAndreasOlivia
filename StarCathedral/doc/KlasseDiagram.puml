@startuml
!pragma layout smetana
'https://plantuml.com/class-diagram

class LogIn {
- String username
- String password
- TextUI ui
- DBConnector db
# void login()
+ String getName()
}
class Riddle{
-String riddleText
-String answer
-String hint
-String extraHint
-TextUI ui
-int riddleSolvedCounter
+Riddle()
+String getRiddleText()
+String getHint()
+String getExtraHint()
+boolean checkAnswer()
+void displayRiddle()
+int getRiddleSolvedCounter()
}

class Quest{
-String questName
-String questDescription
#boolean isQuestCompleted
+Quest()
+checkCompletion()
+String getQuestNameAndDescription()
+boolean getIsQuestCompleted()
}

class Timer{
#long secondsDisplay
#long elapsedSeconds
#long elapsedMinutes
#showTime()
+long getSeconds()
}
class Game{
-LogIn login
-DBConnector db
-Timer time
-long startTime
-Player player
-Map map
-GameUserInterface gui
-TextUI ui
-Quest quest
-Room targetRoom
-long timeReward
+Game()
+void startGame()
+void goCommand()
-Direction parseCommand()
+boolean goDirection()
+Room getCurrentRoom()
+Player getPlayer()
+void setCurrentQuest()
+String getCurrentQuestNameAndDescription()

}
class Player{
-int health
-ArrayList inventory
-Room currentRoom
+Player()
+Room getCurrentRoom()
+void setCurrentRoom()
+boolean move()
#boolean getItem()
+List<Item> getInventory()
+void decreaseHealth()
+int getHealth()
+void useItem()
}

class Map {
-ArrayList roomList1
-ArrayList roomList2
-ArrayList roomList3
-Room startRoom
-ArrayList<Riddle> riddleList
+buildMap()
+getStartRoom()
+Room fetchMissionRoom()
+Room getFinalLockedRoom()
}
class Room {
-Room forwardRoom
-Room backwardsRoom
-Room upRoom
-Room downRoom
-String roomName
-String roomDescription
-ArrayList items
#setForwardRoom()
#setBackwardsRoom()
#setUpRoom()
#setDownRoom()
#getForwardRoom()
#getBackwardsRoom()
#getUpRoom()
#getDownRoom()
#getItem()
#addItem()
+removeItem()
+findItem()


}
interface Creature {
-String creatureName
-String creatureDescription
-String creatureMsg
-int creatureDmgNum
-int creatureHealth
#void monsterReward()
#boolean ifPlayerFriendly()
#boolean ifPlayerHostile()

}
class Friend {
}
class Neutral
class Hostile
abstract class Item{
-String itemName
-String itemDescription
# String getItemName()
#String getItemDescription()
#void monsterReward()
}

class Consumables{
-int healingStrength
# int healingCalc()

}


Timer*--Game
LogIn*--Game
Game*--Player

Game*--Map
Room*--Map
Room*--Item
Room*--Creature
Room*-- Riddle
Creature<--Friend
Creature<--Neutral
Creature<--Hostile
Creature *-- Quest
Item<--Consumables





@enduml